/*
 * Copyright (C) 2024-2025 OpenAni and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license, which can be found at the following link.
 *
 * https://github.com/open-ani/ani/blob/main/LICENSE
 */

// @formatter:off
// @formatter:off
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package me.him188.ani.client.apis

import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import me.him188.ani.client.infrastructure.ApiClient
import me.him188.ani.client.infrastructure.HttpResponse
import me.him188.ani.client.infrastructure.RequestConfig
import me.him188.ani.client.infrastructure.RequestMethod
import me.him188.ani.client.infrastructure.wrap
import me.him188.ani.client.models.AniCollectionType
import me.him188.ani.client.models.AniEpisodeCollectionEntity
import me.him188.ani.client.models.AniPaginatedResponse
import me.him188.ani.client.models.AniUpdateEpisodeCollectionRequest

open class EpisodesAniApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * 删除剧集收藏
     * 删除剧集收藏
     * @param episodeId 
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteEpisodeCollection(episodeId: kotlin.Long): HttpResponse<kotlin.Any> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v2/episodes/{episodeId}".replace("{" + "episodeId" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 获取单个剧集信息
     * 获取单个剧集信息
     * @param episodeId 
     * @return AniEpisodeCollectionEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getEpisodeCollection(episodeId: kotlin.Long): HttpResponse<AniEpisodeCollectionEntity> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/episodes/{episodeId}".replace("{" + "episodeId" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 获取某条目的剧集收藏列表
     * 获取某条目的剧集收藏列表
     * @param subjectId 
     * @param offset  (optional)
     * @param limit  (optional)
     * @param type  (optional)
     * @return AniPaginatedResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getEpisodeCollections(subjectId: kotlin.Long, offset: kotlin.Int? = null, limit: kotlin.Int? = null, type: AniCollectionType? = null): HttpResponse<AniPaginatedResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        subjectId?.apply { localVariableQuery["subjectId"] = listOf("$subjectId") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        type?.apply { localVariableQuery["type"] = listOf("$type") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/episodes/list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 更新剧集收藏
     * 更新剧集收藏
     * @param episodeId 
     * @param aniUpdateEpisodeCollectionRequest  (optional)
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateEpisodeCollection(episodeId: kotlin.Long, aniUpdateEpisodeCollectionRequest: AniUpdateEpisodeCollectionRequest? = null): HttpResponse<kotlin.Any> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = aniUpdateEpisodeCollectionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/v2/episodes/{episodeId}".replace("{" + "episodeId" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}

// @formatter:on

// @formatter:on
