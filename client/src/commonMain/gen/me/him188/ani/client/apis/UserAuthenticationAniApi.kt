/*
 * Copyright (C) 2024-2025 OpenAni and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license, which can be found at the following link.
 *
 * https://github.com/open-ani/ani/blob/main/LICENSE
 */

// @formatter:off
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package me.him188.ani.client.apis

import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import me.him188.ani.client.infrastructure.ApiClient
import me.him188.ani.client.infrastructure.HttpResponse
import me.him188.ani.client.infrastructure.RequestConfig
import me.him188.ani.client.infrastructure.RequestMethod
import me.him188.ani.client.infrastructure.wrap
import me.him188.ani.client.models.AniAuthenticationResponse
import me.him188.ani.client.models.AniEditEmailRequest
import me.him188.ani.client.models.AniLoginResponse
import me.him188.ani.client.models.AniRefreshTokenRequest
import me.him188.ani.client.models.AniRegisterOrLoginByEmailOtpRequest
import me.him188.ani.client.models.AniSendEmailOtpRequest
import me.him188.ani.client.models.AniSendOptResponse
import me.him188.ani.client.models.AniSetPasswordRequest

open class UserAuthenticationAniApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * 绑定或换绑邮箱
     * 绑定或换绑邮箱
     * @param aniEditEmailRequest 
     * @return AniAuthenticationResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun editEmail(aniEditEmailRequest: AniEditEmailRequest): HttpResponse<AniAuthenticationResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = aniEditEmailRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v2/users/auth/email",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 刷新会话 token
     * 刷新会话 token
     * @param aniRefreshTokenRequest 
     * @return AniLoginResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun refreshToken(aniRefreshTokenRequest: AniRefreshTokenRequest): HttpResponse<AniLoginResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = aniRefreshTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/users/auth/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 使用邮箱验证码登录或注册
     * 使用邮箱验证码登录或注册
     * @param aniRegisterOrLoginByEmailOtpRequest 
     * @return AniAuthenticationResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun registerOrLoginByEmailOtp(aniRegisterOrLoginByEmailOtpRequest: AniRegisterOrLoginByEmailOtpRequest): HttpResponse<AniAuthenticationResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = aniRegisterOrLoginByEmailOtpRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/users/auth/email",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 发送邮箱验证码
     * 发送邮箱验证码
     * @param aniSendEmailOtpRequest 
     * @return AniSendOptResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sendEmailOtp(aniSendEmailOtpRequest: AniSendEmailOtpRequest): HttpResponse<AniSendOptResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = aniSendEmailOtpRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/users/auth/email/otp",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 老用户设置密码. 只能设置一次, 之后要使用邮箱修改密码.
     * 老用户设置密码. 只能设置一次, 之后要使用邮箱修改密码.
     * @param aniSetPasswordRequest 
     * @return AniAuthenticationResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun setPassword(aniSetPasswordRequest: AniSetPasswordRequest): HttpResponse<AniAuthenticationResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = aniSetPasswordRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v2/users/auth/password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}

// @formatter:on
