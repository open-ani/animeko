/*
 * Copyright (C) 2024-2025 OpenAni and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license, which can be found at the following link.
 *
 * https://github.com/open-ani/ani/blob/main/LICENSE
 */

/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package me.him188.ani.datasources.bangumi.models


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * 用户组 - 1 = 管理员 - 2 = Bangumi 管理猿 - 3 = 天窗管理猿 - 4 = 禁言用户 - 5 = 禁止访问用户 - 8 = 人物管理猿 - 9 = 维基条目管理猿 - 10 = 用户 - 11 = 维基人
 *
 * Values: Admin,BangumiAdmin,DoujinAdmin,MutedUser,BlockedUser,PersonAdmin,WikiAdmin,User,WikiUser
 */
@Serializable
enum class BangumiUserGroup(val value: kotlin.Int) {

    @SerialName(value = "1")
    Admin(1),

    @SerialName(value = "2")
    BangumiAdmin(2),

    @SerialName(value = "3")
    DoujinAdmin(3),

    @SerialName(value = "4")
    MutedUser(4),

    @SerialName(value = "5")
    BlockedUser(5),

    @SerialName(value = "8")
    PersonAdmin(8),

    @SerialName(value = "9")
    WikiAdmin(9),

    @SerialName(value = "10")
    User(10),

    @SerialName(value = "11")
    WikiUser(11);

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value.toString()

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is BangumiUserGroup) "$data" else null

        /**
         * Returns a valid [BangumiUserGroup] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): BangumiUserGroup? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

