/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package me.him188.ani.datasources.bangumi.next.apis

import me.him188.ani.datasources.bangumi.next.models.BangumiNextBlogEntry
import me.him188.ani.datasources.bangumi.next.models.BangumiNextCreateBlogComment200Response
import me.him188.ani.datasources.bangumi.next.models.BangumiNextCreateBlogCommentRequest
import me.him188.ani.datasources.bangumi.next.models.BangumiNextErrorResponse
import me.him188.ani.datasources.bangumi.next.models.BangumiNextGetBlogComments200ResponseInner
import me.him188.ani.datasources.bangumi.next.models.BangumiNextGetBlogPhotos200Response
import me.him188.ani.datasources.bangumi.next.models.BangumiNextSlimSubject

import me.him188.ani.datasources.bangumi.next.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class BlogBangumiNextApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * 创建日志的吐槽
     * 
     * @param entryID 
     * @param bangumiNextCreateBlogCommentRequest  (optional)
     * @return BangumiNextCreateBlogComment200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createBlogComment(entryID: kotlin.Int, bangumiNextCreateBlogCommentRequest: BangumiNextCreateBlogCommentRequest? = null): HttpResponse<BangumiNextCreateBlogComment200Response> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = bangumiNextCreateBlogCommentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/p1/blogs/{entryID}/comments".replace("{" + "entryID" + "}", "$entryID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 获取日志的吐槽箱
     * 
     * @param entryID 
     * @return kotlin.collections.List<BangumiNextGetBlogComments200ResponseInner>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBlogComments(entryID: kotlin.Int): HttpResponse<kotlin.collections.List<BangumiNextGetBlogComments200ResponseInner>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/blogs/{entryID}/comments".replace("{" + "entryID" + "}", "$entryID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetBlogCommentsResponse>().map { value }
    }

    @Serializable(GetBlogCommentsResponse.Companion::class)
    private class GetBlogCommentsResponse(val value: List<BangumiNextGetBlogComments200ResponseInner>) {
        companion object : KSerializer<GetBlogCommentsResponse> {
            private val serializer: KSerializer<List<BangumiNextGetBlogComments200ResponseInner>> = serializer<List<BangumiNextGetBlogComments200ResponseInner>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetBlogCommentsResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetBlogCommentsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 获取日志详情
     * 
     * @param entryID 
     * @return BangumiNextBlogEntry
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBlogEntry(entryID: kotlin.Int): HttpResponse<BangumiNextBlogEntry> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/blogs/{entryID}".replace("{" + "entryID" + "}", "$entryID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 获取日志的图片
     * 
     * @param entryID 
     * @param limit max 100 (optional, default to 20)
     * @param offset min 0 (optional, default to 0)
     * @return BangumiNextGetBlogPhotos200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBlogPhotos(entryID: kotlin.Int, limit: kotlin.Int? = 20, offset: kotlin.Int? = 0): HttpResponse<BangumiNextGetBlogPhotos200Response> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/blogs/{entryID}/photos".replace("{" + "entryID" + "}", "$entryID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 获取日志的关联条目
     * 
     * @param entryID 
     * @return kotlin.collections.List<BangumiNextSlimSubject>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBlogRelatedSubjects(entryID: kotlin.Int): HttpResponse<kotlin.collections.List<BangumiNextSlimSubject>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/blogs/{entryID}/subjects".replace("{" + "entryID" + "}", "$entryID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetBlogRelatedSubjectsResponse>().map { value }
    }

    @Serializable(GetBlogRelatedSubjectsResponse.Companion::class)
    private class GetBlogRelatedSubjectsResponse(val value: List<BangumiNextSlimSubject>) {
        companion object : KSerializer<GetBlogRelatedSubjectsResponse> {
            private val serializer: KSerializer<List<BangumiNextSlimSubject>> = serializer<List<BangumiNextSlimSubject>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetBlogRelatedSubjectsResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetBlogRelatedSubjectsResponse(serializer.deserialize(decoder))
        }
    }

}
