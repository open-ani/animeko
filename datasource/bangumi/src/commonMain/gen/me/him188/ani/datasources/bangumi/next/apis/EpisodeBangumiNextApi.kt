/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package me.him188.ani.datasources.bangumi.next.apis

import me.him188.ani.datasources.bangumi.next.models.BangumiNextCreateEpisodeComment200Response
import me.him188.ani.datasources.bangumi.next.models.BangumiNextCreateEpisodeCommentRequest
import me.him188.ani.datasources.bangumi.next.models.BangumiNextEpisode
import me.him188.ani.datasources.bangumi.next.models.BangumiNextErrorResponse
import me.him188.ani.datasources.bangumi.next.models.BangumiNextGetEpisodeComments200ResponseInner
import me.him188.ani.datasources.bangumi.next.models.BangumiNextUpdateContent

import me.him188.ani.datasources.bangumi.next.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class EpisodeBangumiNextApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * 创建条目的剧集吐槽
     * 
     * @param episodeID 
     * @param bangumiNextCreateEpisodeCommentRequest  (optional)
     * @return BangumiNextCreateEpisodeComment200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createEpisodeComment(episodeID: kotlin.Int, bangumiNextCreateEpisodeCommentRequest: BangumiNextCreateEpisodeCommentRequest? = null): HttpResponse<BangumiNextCreateEpisodeComment200Response> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = bangumiNextCreateEpisodeCommentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/p1/episodes/{episodeID}/comments".replace("{" + "episodeID" + "}", "$episodeID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 删除条目的剧集吐槽
     * 
     * @param commentID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteEpisodeComment(commentID: kotlin.Int): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/p1/episodes/-/comments/{commentID}".replace("{" + "commentID" + "}", "$commentID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 获取剧集信息
     * 
     * @param episodeID 
     * @return BangumiNextEpisode
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getEpisode(episodeID: kotlin.Int): HttpResponse<BangumiNextEpisode> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/episodes/{episodeID}".replace("{" + "episodeID" + "}", "$episodeID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     * 获取条目的剧集吐槽箱
     * 
     * @param episodeID 
     * @return kotlin.collections.List<BangumiNextGetEpisodeComments200ResponseInner>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getEpisodeComments(episodeID: kotlin.Int): HttpResponse<kotlin.collections.List<BangumiNextGetEpisodeComments200ResponseInner>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/episodes/{episodeID}/comments".replace("{" + "episodeID" + "}", "$episodeID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetEpisodeCommentsResponse>().map { value }
    }

    @Serializable(GetEpisodeCommentsResponse.Companion::class)
    private class GetEpisodeCommentsResponse(val value: List<BangumiNextGetEpisodeComments200ResponseInner>) {
        companion object : KSerializer<GetEpisodeCommentsResponse> {
            private val serializer: KSerializer<List<BangumiNextGetEpisodeComments200ResponseInner>> = serializer<List<BangumiNextGetEpisodeComments200ResponseInner>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetEpisodeCommentsResponse) =
                serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetEpisodeCommentsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 编辑条目的剧集吐槽
     * 
     * @param commentID 
     * @param bangumiNextUpdateContent  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateEpisodeComment(commentID: kotlin.Int, bangumiNextUpdateContent: BangumiNextUpdateContent? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = bangumiNextUpdateContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/p1/episodes/-/comments/{commentID}".replace("{" + "commentID" + "}", "$commentID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
