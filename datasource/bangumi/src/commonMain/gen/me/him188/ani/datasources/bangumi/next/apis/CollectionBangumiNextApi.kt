/*
 * Copyright (C) 2024-2025 OpenAni and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license, which can be found at the following link.
 *
 * https://github.com/open-ani/ani/blob/main/LICENSE
 */

/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package me.him188.ani.datasources.bangumi.next.apis

import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import me.him188.ani.datasources.bangumi.next.infrastructure.ApiClient
import me.him188.ani.datasources.bangumi.next.infrastructure.HttpResponse
import me.him188.ani.datasources.bangumi.next.infrastructure.RequestConfig
import me.him188.ani.datasources.bangumi.next.infrastructure.RequestMethod
import me.him188.ani.datasources.bangumi.next.infrastructure.wrap
import me.him188.ani.datasources.bangumi.next.models.BangumiNextCollectSubject
import me.him188.ani.datasources.bangumi.next.models.BangumiNextCollectionType
import me.him188.ani.datasources.bangumi.next.models.BangumiNextGetMySubjectCollections200Response
import me.him188.ani.datasources.bangumi.next.models.BangumiNextSubjectType
import me.him188.ani.datasources.bangumi.next.models.BangumiNextUpdateSubjectProgress

open class CollectionBangumiNextApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer,
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * 获取当前用户的条目收藏
     * 
     * @param subjectType  (optional)
     * @param type  (optional)
     * @param since 起始时间戳 (optional)
     * @param limit max 100 (optional, default to 20)
     * @param offset min 0 (optional, default to 0)
     * @return BangumiNextGetMySubjectCollections200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMySubjectCollections(
        subjectType: BangumiNextSubjectType? = null,
        type: BangumiNextCollectionType? = null,
        since: kotlin.Int? = null,
        limit: kotlin.Int? = 20,
        offset: kotlin.Int? = 0
    ): HttpResponse<BangumiNextGetMySubjectCollections200Response> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        subjectType?.apply { localVariableQuery["subjectType"] = listOf("$subjectType") }
        type?.apply { localVariableQuery["type"] = listOf("$type") }
        since?.apply { localVariableQuery["since"] = listOf("$since") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/p1/collections/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


    /**
     * 新增或修改条目收藏
     * 
     * @param subjectID 
     * @param bangumiNextCollectSubject  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateSubjectCollection(
        subjectID: kotlin.Int,
        bangumiNextCollectSubject: BangumiNextCollectSubject? = null
    ): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = bangumiNextCollectSubject

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/p1/collections/subjects/{subjectID}".replace("{" + "subjectID" + "}", "$subjectID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }



    /**
     * 更新条目进度
     * 
     * @param subjectID 
     * @param bangumiNextUpdateSubjectProgress  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateSubjectProgress(
        subjectID: kotlin.Int,
        bangumiNextUpdateSubjectProgress: BangumiNextUpdateSubjectProgress? = null
    ): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = bangumiNextUpdateSubjectProgress

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/p1/collections/subjects/{subjectID}".replace("{" + "subjectID" + "}", "$subjectID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }


}
